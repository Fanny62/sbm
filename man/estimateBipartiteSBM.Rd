% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate.R
\name{estimateBipartiteSBM}
\alias{estimateBipartiteSBM}
\title{Estimation of Bipartite SBMs}
\usage{
estimateBipartiteSBM(
  netMat,
  model = "bernoulli",
  covariates = list(),
  estimOptions = list()
)
}
\arguments{
\item{netMat}{a matrix describing the network: either an adjacency (square) or incidence matrix with possibly weighted entries.}

\item{model}{character describing the model for the relation between nodes (\code{'bernoulli'}, \code{'poisson'}, \code{'gaussian'}, ...). Default is \code{'bernoulli'}.}

\item{covariates}{a list of matrices with same dimension as mat describing covariates at the edge level. No covariate per Default.}

\item{estimOptions}{a list of parameters controlling the inference algorithm and model selection. See details.}
}
\value{
a list with the estimated parameters. See details...
}
\description{
This function performs variational inference of bipartite Stochastic Block Models, with various model
for the distribution of the edges:  Bernoulli, Poisson, or Gaussian models.
}
\details{
The list of parameters \code{estimOptions} essentially tunes the optimization process and the variational EM algorithm, with the following parameters
\itemize{
\item{"nbCores"}{integer for number of cores used. Default is 1.}
\item{"verbosity"}{integer for verbosity (0, 1). Default is 1.}
\item{"exploreFactor"}{control the exploration of the number of groups}
\item{"nbBlocksRange"}{minimal and maximal number or blocks explored}
}
}
\examples{
### BIPARTITE SBM
## bipartite graph parameters
npc      <- c(50,40) # nodes per class
nbBlocks <- c(2,3)   # nb group per nodes
dim      <- npc * nbBlocks  # dimension (nb nodes in row/col)
Z1 <- diag(nbBlocks[1]) \%x\% matrix(1, npc[1], 1)
Z2 <- diag(nbBlocks[2]) \%x\% matrix(1, npc[2], 1)
connectParam <- matrix(runif(nbBlocks[1]*nbBlocks[2]), nbBlocks[1], nbBlocks[2])

## Graph Sampling
edgeProb <- Z1 \%*\% connectParam \%*\% t(Z2)
IncMatrix <- 1 * (matrix(runif(dim[1] * dim[2]), dim[1], dim [2]) < edgeProb)

## Estimation
myBipartiteSBM <- estimateBipartiteSBM(IncMatrix)
myBipartiteSBM$fitted[order(myBipartiteSBM$memberships[[1]]), order(myBipartiteSBM$memberships[[2]])] \%>\%
 corrplot::corrplot(is.corr = FALSE, method = "color")
}
