% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate.R
\name{estimateMultipartiteSBM}
\alias{estimateMultipartiteSBM}
\title{Estimation for multipartite SBM}
\usage{
estimateMultipartiteSBM(listSBM, estimOptions = list())
}
\arguments{
\item{listSBM}{list of networks that were defined by the \code{defineSBM} function}

\item{estimOptions}{options for the inference procedure}
}
\value{
a MultipartiteSBM_fit object with the estimated parameters and the blocks in each Functional Group
}
\description{
Estimation for multipartite SBM
}
\details{
The list of parameters \code{estimOptions} essentially tunes the optimization process and the variational EM algorithm, with the following parameters
\itemize{
\item{"nbCores"}{integer for number of cores used. Default is 2}
\item{"verbosity"}{integer for verbosity (0, 1). Default is 1}
\item{"nbBlocksRange"}{List of length the number of functional groups, each element supplying the minimal and maximal number of blocks to be explored. The names of the list must be the names of the functional groups.  Default value is from 1 to 10)}
\item{"initBM"}{Boolean. True if using simple and bipartite SBM as initialisations. Default value  = TRUE}
\item{"maxiterVEM"}{Number of max. number of iterations in  the VEM}
\item{"maxiterVE"}{Number of max. number of iterations in  the VE}
}
}
\examples{
#' # About the Functional Groups (FG)
nbBlocks  <- c(3,2,2)
nbNodes <-  c(100,50,40)
blockProp <- vector("list", 3)
blockProp[[1]] <- c(0.4,0.3,0.3) # in Functional Group 1
blockProp[[2]] <- c(0.6,0.4) # in Functional Group 2
blockProp[[3]]  <- c(0.6,0.4) # in Functional Group 3
archiMultipartite  <-  rbind(c(1,2),c(2,3),c(2,2),c(1,3))
model <- c('bernoulli','poisson','bernoulli','gaussian')
directed <- c( NA, NA  ,  FALSE , NA)
connectParam <- list()
E <- archiMultipartite
mu <- rbeta(nbBlocks[E[1,1]] * nbBlocks[E[1,2]],1,1 )
connectParam[[1]] <- list(mean = matrix(mu,nrow = nbBlocks[E[1,1]], ncol = nbBlocks[E[1,2]] ))
mu <- rgamma(nbBlocks[E[2,1]] * nbBlocks[E[2,2]],7.5,0.01 )
connectParam[[2]] <- list(mean  =  matrix(mu,nrow = nbBlocks[E[2,1]], ncol = nbBlocks[E[2,2]]))
p <- rbeta(nbBlocks[E[3,1]] * nbBlocks[E[3,2]],0.9,0.0 )
p <- 1/2*(p + t(p))
connectParam[[3]] <- list(mean  =  matrix(p, nrow = nbBlocks[E[3,1]], ncol = nbBlocks[E[3,2]]))
mu <- rnorm(nbBlocks[E[4,1]] * nbBlocks[E[4,2]],7.5,10 )
connectParam[[4]] <- list(mean = matrix(mu, nrow = nbBlocks[E[4,1]], ncol = nbBlocks[E[4,2]]))
v <- rgamma(nbBlocks[E[4,1]] * nbBlocks[E[4,2]],7.5,0.1 )
connectParam[[4]]$var <- matrix(v, nrow = nbBlocks[E[4,1]], ncol = nbBlocks[E[4,2]])
## Graph Sampling
mySampleMSBM <- sampleMultipartiteSBM(nbNodes, blockProp,
                                      archiMultipartite, connectParam, model,
                                      directed, dimLabels = as.list(c('A','B','C')))
listSBM <- mySampleMSBM$listSBM
estimOptions = list(initBM = FALSE)
myMSBM <- estimateMultipartiteSBM(listSBM,estimOptions)
}
