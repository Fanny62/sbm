% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/estimate.R
\name{estimateSimpleSBM}
\alias{estimateSimpleSBM}
\title{Estimation of Simple SBMs}
\usage{
estimateSimpleSBM(
  netMat,
  model = "bernoulli",
  directed = !isSymmetric(netMat),
  covariates = list(),
  estimOptions = list()
)
}
\arguments{
\item{netMat}{a matrix describing the network: either an adjacency (square) or incidence matrix with possibly weighted entries.}

\item{model}{character describing the model for the relation between nodes (\code{'bernoulli'}, \code{'poisson'}, \code{'gaussian'}, ...). Default is \code{'bernoulli'}.}

\item{directed}{logical: is the network directed or not? Only relevant when \code{type} is \code{'Simple'}. Default is \code{TRUE} if \code{netMat} is symmetric, \code{FALSE} otherwise}

\item{covariates}{a list of matrices with same dimension as mat describing covariates at the edge level. No covariate per Default.}

\item{estimOptions}{a list of parameters controlling the inference algorithm and model selection. See details.}
}
\value{
a list with the estimated parameters. See details...
}
\description{
This function performs variational inference of simple Stochastic Block Models, with various model
for the distribution of the edges:  Bernoulli, Poisson, or Gaussian models.
}
\details{
The list of parameters \code{estimOptions} essentially tunes the optimization process and the variational EM algorithm, with the following parameters
\itemize{
\item{"nbCores"}{integer for number of cores used. Default is 1.}
\item{"verbosity"}{integer for verbosity (0, 1). Default is 1.}
\item{"exploreFactor"}{control the exploration of the number of groups}
\item{"nbBlocksRange"}{minimal and maximal number or blocks explored}
}
}
\examples{
### SIMPLE SBM

## Graph parameters
nbNodes  <- 90
blockProp <- c(.5, .25, .25)      # group proportions
connectProb <- diag(.4, 3) + 0.05 # connectivity matrix: affiliation network

## Sampling
mySampler <- sampleSimpleSBM(nbNodes, blockProp, list(mu = connectProb))
adjacencyMatrix <- mySampler$netMatrix

## Estimation
mySimpleSBM <- estimateSimpleSBM(adjacencyMatrix)
par(mfrow = c(2,2))
plot(mySimpleSBM, 'data', ordered = FALSE)
plot(mySimpleSBM, 'data')
plot(mySimpleSBM, 'expected', ordered = FALSE)
plot(mySimpleSBM, 'expected')

}
